
  afterEach(function(done) {
    Game.remove({}, done);
  });

  after(function(done) {
    db.db.dropCollection('games', function(err, result) {
      if(err) return done(err);
      done();
    });
  });

  describe('Properties', function() {

    var testGame;

    before(function(done) {
      testGame = new Game({});
      testGame.save(done);
    });

    xit('should have a players property', function(done) {
      expect(testGame).to.have.property('players');
      done();
    });

    it('should have a stack property', function(done) {
      expect(testGame).to.have.property('stack');
      done();
    });

    it('should have a currentOptions property', function(done) {
      expect(testGame).to.have.property('currentOptions');
      done();
    });
  });

  describe('Creation', function() {
    var thisGame;
    // var testGame;
    // var game_id;
    // var req1 = { apiObject: mockActor };
    // var req2 = { apiObject: mockMovie };
    console.log(testActor);
    var data = {
      //players: [],
      stack: [testActor.entry, testMovie.entry],
      currentOptions: testMovie.credits
    };

    before(function(done) {
      console.log('bar');
      var dataActor = apiToObject(mockActor);
      var dataMovie = apiToObject(mockMovie);
      testActor = new Actor(dataActor);
      testMovie = new Movie(dataMovie);
      testActor.save(function(err) {
        console.log(testActor);
        testMovie.save(function(err) {

        });
      });
      // var newGame = {
      //   stack: {
      //     type: cardObject1.type,
      //     moviedb_id: cardObject1.moviedb_id,
      //     name: cardObject1.name,
      //     image: cardObject1.image
      //   },
      //   currentOptions: cardObject1.credits
      // };
      //console.log(newGame);
      //console.log(cardObject1);
      thisGame = new Game(data);
      thisGame.save(done);

      // Game.save(
      //    function(err, game) {
      //   console.log('this', game);
      //   testGame = game;
      //   game_id = game._id;
      //   done();
      //   // game.pushCard(cardObject1, done);
      // });
      //console.log(testGame)
    });

    it('should be able to create a blank game record', function(done) {
      //console.log(thisGame._id);
      Game.findById(thisGame._id, function(err, game) {
        expect(err).to.not.exist;
        expect(game).to.exist;
        done();
      });
    });

    it('should have the correct stack data for an actor v card', function(done) {
      Game.findById(testGame._id, function(err, game) {
        //console.log(game);
        expect(game.stack[0].type).to.equal(cardObject1.type);
        expect(game.stack[0].name).to.equal(cardObject1.name);
        expect(game.stack[0].moviedb_id).to.equal(cardObject1.moviedb_id);
        expect(game.stack[0].image).to.equal(cardObject1.image);
        done();
      });
      // testGame.pushCard(cardObject1, function(err) {
      //   console.log(testGame._id);
      //   Game.findById(testGame._id, function(err, game) {
      //     console.log(game);
      //     expect(game.stack[0].type).to.equal(cardObject1.type);
      //     expect(game.stack[0].name).to.equal(cardObject1.name);
      //     expect(game.stack[0].moviedb_id).to.equal(cardObject1.moviedb_id);
      //     expect(game.stack[0].image).to.equal(cardObject1.image);
      //     done();
      //   });
      // });
    });

    xit('should have the correct stack data for an actor card', function(done) {
      expect(testGame.stack[1].type).to.equal(cardObject2.type);
      expect(testGame.stack[1].name).to.equal(cardObject2.name);
      expect(testGame.stack[1].moviedb_id).to.equal(cardObject2.moviedb_id);
      expect(testGame.stack[1].image).to.equal(cardObject2.image);
      done();
    });

    it('should have current options set to the credits from the last card', function(done) {
      expect(testGame.currentOptions[0].name).to.equal(cardObject2.credits[0].name);
      expect(testGame.currentOptions[0].moviedb_id).to.equal(cardObject2.credits[0].moviedb_id);
      expect(testGame.currentOptions[0].image).to.equal(cardObject2.credits[0].image);
      done();
    });

  });
